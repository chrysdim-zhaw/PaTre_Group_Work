---
title: "Project Work"
author: "Ramon und Dimitri"
format:  
  html:
    toc: true  # Enable Table of Contents
    toc-depth: 3  # Optional: Set the depth of ToC (default is 3)
    number-sections: true  # Number headings in the document
execute:
  echo: true  # Prevent code output in the final document
bibliography: bibliography.bib  # Ensure the file name is correct
---


# Abstract {.unnumbered .unlisted}

This study analyzes the movement patterns of two students using Google Timeline tracking and SimaPro for GHG emissions assessment. By segmenting rest and movement phases, identifying key locations, and comparing transportation modes, the project quantifies mobility behaviors and environmental impact. The findings will be visualized through maps and statistical comparisons, ensuring an insightful sustainability analysis.

```{r, warning=FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(tmap)
library(tidyverse)
library(leaflet)
library(purrr)

```

# Introduction {#introduction}  

In this work the google mapd data from Ramon and Dimitri will be analyzed. The data is stored in a json file. The data contains the GPS coordinates of the two persons. The data will be visualized on a map.
Further, the data will be analyzed and the distance between the two persons will be calculated.

## Research Questions

1.	How do the movement patterns of the two students differ?
    a.	What is the ratio between rest and movement? (Segmentation) 
    b.	Which is the most frequently visited location?
    c.	How does the use of transportation modes differ between the samples over a specific period?
    d.	What impact do the movement patterns have on each student's CO₂ footprint?
    
## Data Collection
    
The primary data source will be Google Timeline tracking, which will provide detailed movement patterns, including transportation modes, travel distances, and time spent at different locations. The data collection window will be one month, ensuring both students’ mobility data is aligned for accurate comparison.
Additionally, GHG emissions data will be obtained from SimaPro, which will help quantify the environmental impact of different transportation choices. This will require contextual data on transport emission factors (e.g., CO2 emissions per km for cars, public transport, cycling, etc.).
Further contextual data, such as university schedules, or personal habits, may be useful for interpreting movement patterns. 
At this stage, not all data has been collected, but Google Timeline tracking and SimaPro will serve as key sources for analysis.

## Methodology

Define movement patterns in terms of distance traveled, frequency of trips, and time spent in motion vs. at rest as well as transportation modes and their emission caused. 
Define "rest" as periods of inactivity (e.g., staying at home, being in one location for extended periods) and "movement" as active transportation or mobility events. 
Categorize transportation modes (e.g., walking, biking, public transport, car). Collect data on usage frequency, duration, and distance for each mode over a set period (e.g., one week or one month). Compare patterns between the two students.
Measure GHG emissions based on transportation modes used (e.g., car, bike, public transport) and distances traveled. Use an established GHG emission calculator (i.e., SimaPro or publicly available emission factors) to quantify the footprint. 

### Data Analysis, packages, and tools

For this analysis, R will be used for data cleaning, spatial analysis, visualization, and statistical modeling. Key concepts and packages include:

  a. Data manipulation: dplyr, tidyverse for cleaning and structuring Google Timeline data.
  b. Spatial analysis: sf, and raster to analyze GPS locations, travel distances, and movement patterns.
  c. Visualization: ggplot2, tmap, and leaflet for creating maps, route heatmaps, and movement patterns.
  d. GHG emission calculations: EcoInvent datai for CO₂ footprint calculations.
  e. Time series analysis: lubridate for analyzing movement trends over the one-month period.

Additional spatial analysis methods may include kernel density estimation (KDE) for hotspot detection and network analysis for transportation mode comparisons.

## Potential Challenges

A potential challenge in this study is missing or incomplete GPS data from Google Timeline. These gaps may arise due to GPS inaccuracies, device settings, or network issues, leading to incomplete movement records. To address this, missing data will be extrapolated using interpolation techniques, such as linear interpolation or time-weighted averages, ensuring continuity in movement trends.

Another issue is the misclassification of transportation modes, where Google Timeline may inaccurately categorize movement (e.g., mistaking walking for biking). To improve data reliability, transportation modes will be cross-verified using movement speed, timestamps, and contextual information, allowing for necessary corrections and more accurate mobility analysis.

# Data Import 

In this Chapter the data from Ramon and Dimitri will be imported, modifed with the sf_packages (Source) and visualized on a map.



```{r}
file_dimi <- "data/timeline_dimi.json"
data_dimi <- fromJSON(file_dimi)

file_ramon <- "data/Timeline_ramon.json"
data_ramon <- fromJSON(file_ramon)
```


```{r}
# Struktur ansehen
str(data_dimi)
str(data_ramon)


```

Dimi
```{r}

visits_dimi <- data_dimi$semanticSegments |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng)) |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    probability = visit$probability,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime)
  ) %>%
  select(start, end, place_id, lat_lng, probability)



# Dimi: Filter visits longer than 60 min and split coordinates
visits_dimi_2 <- data_dimi$semanticSegments |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng)) |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime),
    duration_mins = as.numeric(difftime(end, start, units = "mins"))
  ) |> 
  separate(lat_lng, into = c("lat", "lng"), sep = ", ") |> 
  mutate(
    lat = str_remove(lat, "°") %>% as.numeric(),
    lng = str_remove(lng, "°") %>% as.numeric()
  ) |> 
  filter(duration_mins >= 60) |> 
  select(start, end, duration_mins, lat, lng, place_id)

# Dimi: Leaflet Map
leaflet(visits_dimi_2) |> 
  addTiles() %>%
  addCircleMarkers(
    ~lng, ~lat,
    radius = 6,
    color = "blue",
    stroke = FALSE,
    fillOpacity = 0.7,
    popup = ~paste0(
      "<b>Start:</b> ", start, "<br>",
      "<b>Ende:</b> ", end, "<br>",
      "<b>Dauer:</b> ", round(duration_mins), " Minuten"
    )
  ) %>%
  addLegend(
    position = "bottomright",
    colors = "blue",
    labels = "Dimi's Visits > 1 hour",
    title = "Google Timeline"
  )

```



ramon 
```{r}
# Ramon: Alle Aufenthalte extrahieren
visits_ramon <- data_ramon$semanticSegments |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng)) |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    probability = visit$probability,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime)
  ) %>%
  select(start, end, place_id, lat_lng, probability)

visits_ramon_2 <- data_ramon$semanticSegments |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng)) |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime),
    duration_mins = as.numeric(difftime(end, start, units = "mins"))
  ) |> 
  separate(lat_lng, into = c("lat", "lng"), sep = ", ") |> 
  mutate(
    lat = str_remove(lat, "°") %>% as.numeric(),
    lng = str_remove(lng, "°") %>% as.numeric()
  ) |> 
  filter(duration_mins >= 60) |> 
  select(start, end, duration_mins, lat, lng, place_id)

leaflet(visits_ramon_2) |> 
  addTiles() %>%
  addCircleMarkers(
    ~lng, ~lat,
    radius = 6,
    color = "red",
    stroke = FALSE,
    fillOpacity = 0.7,
    popup = ~paste0(
      "<b>Start:</b> ", start, "<br>",
      "<b>Ende:</b> ", end, "<br>",
      "<b>Dauer:</b> ", round(duration_mins), " Minuten"
    )
  ) %>%
  addLegend(
    position = "bottomright",
    colors = "red",
    labels = "Ramons Aufenthalte > 1 Stunde",
    title = "Google Timeline"
  )


```

## Activity










## Locations of Dimi

```{r}
file <- "data/Timeline_dimi.json"
data_raw <- fromJSON(file)
```


```{r}
# Struktur ansehen
str(data_raw)

```

```{r}
# Places extrahieren
visit <- data_raw$semanticSegments$visit

#visits → Liste aller Aufenthaltsorte mit Zeitstempeln
visits <- data_raw$semanticSegments |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng)) |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    probability = visit$probability,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime)
  ) %>%
  select(start, end, place_id, lat_lng, probability)

# Aufenthaltsorte extrahieren
visits_2 <- data_raw$semanticSegments  |> 
  filter(!is.na(visit$topCandidate$placeLocation$latLng))  |> 
  mutate(
    place_id = visit$topCandidate$placeId,
    lat_lng = visit$topCandidate$placeLocation$latLng,
    start = ymd_hms(startTime),
    end = ymd_hms(endTime),
    duration_mins = as.numeric(difftime(end, start, units = "mins"))
  )  |> 
  separate(lat_lng, into = c("lat", "lng"), sep = ", ") %>%
  mutate(
    lat = str_remove(lat, "°") %>% as.numeric(),
    lng = str_remove(lng, "°") %>% as.numeric()
  )  |> 
  filter(duration_mins >= 60) %>%
  select(start, end, duration_mins, lat, lng, place_id)

head(visits)
```

```{r}


leaflet(visits_2)  |> 
  addTiles() %>%
  addCircleMarkers(
    ~lng, ~lat,
    radius = 6,
    color = "blue",
    stroke = FALSE,
    fillOpacity = 0.7,
    popup = ~paste0(
      "<b>Start:</b> ", start, "<br>",
      "<b>Ende:</b> ", end, "<br>",
      "<b>Dauer:</b> ", round(duration_mins), " Minuten"
    )
  ) %>%
  addLegend(
    position = "bottomright",
    colors = "blue",
    labels = "Dimi's VIsits > 1 hour",
    title = "Google Timeline"
  )

```